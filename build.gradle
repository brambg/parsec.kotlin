buildscript {
    ext.kotlin_version = '1.2.31'

    repositories {
        mavenCentral()
        maven {
            url 'http://dl.bintray.com/kotlin/kotlin-eap'
        }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'net.saliman:gradle-cobertura-plugin:2.0.0'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.3.1'
    }
}

plugins {
    id "com.jfrog.bintray" version "1.7.3"
    id 'net.saliman.cobertura' version '2.4.0'
    id 'com.github.kt3k.coveralls' version '2.8.1'
    id 'maven-publish'
}

apply plugin: 'kotlin'
apply plugin: 'jacoco'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'cobertura'
apply plugin: 'com.github.kt3k.coveralls'

kotlin_version = '1.2.31'

jacoco {
    toolVersion = '0.7.9'
}

cobertura.coverageFormats = ['html', 'xml']
cobertura.coverageSourceDirs = ['src/main/kotlin']

repositories {
    mavenCentral()
    maven {
        url 'http://dl.bintray.com/kotlin/kotlin-eap'
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

coveralls {
    sourceDirs = files(sourceSets.main.allSource.srcDirs).files.absolutePath
    jacocoReportPath = "${buildDir}/reports/jacoco/test/jacocoRootReport.xml"
}

task jacocoRootReport(type: JacocoReport) {
    dependsOn = subprojects.test
    sourceDirectories = files(sourceSets.main.allSource.srcDirs)
    classDirectories = files(sourceSets.main.output)
    executionData = files(jacocoTestReport.executionData)
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
        xml.destination = "${buildDir}/reports/jacoco/test/jacocoRootReport.xml"
    }
}

dependencies {
    testCompile 'junit:junit:4.12'
    testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
}

test {
    testLogging {
        events "passed", "skipped", "failed"
    }
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

publishing {
    repositories {
        maven {
            // change to point to your repo, e.g. http://my.org/repo
            url = "$buildDir/repo"
        }
    }
    publications {
        mavenJava(MavenPublication) {
            from components.java
            groupId = 'lambdada'
            artifactId = 'parsec'
            version = '1.0'

            artifact sourceJar {
                classifier "sources"
            }
            artifact javadocJar {
                classifier "javadoc"
            }
        }
    }
}

task deployJar(type: Jar)

configurations {
    deployerJars
}

dependencies {
    deployerJars "org.apache.maven.wagon:wagon-ssh:2.9"
}

uploadArchives {
    repositories.mavenDeployer {
        configuration = configurations.deployerJars
        repository(url: "scp://n-195-169-89-50.diginfra.net/data/html/repository") {
            authentication(userName: System.getenv("USER"), privateKey: System.getenv("PRIVATE_KEY"))
        }
    }
}